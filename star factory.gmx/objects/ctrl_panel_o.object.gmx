<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>px=520
py=456
updating=0;
dcenter=24;
d2center=48;
isOn=1;
sliderTrackX=18;
sliderTrackY=-20;
sliderButtonX=sliderTrackX+8;
sliderButtonY=sliderTrackY;
textX=16;
textY=4;
rot=180;
ppx=29;
ppy=366;
pgox=548;
pgoy=428;
gameOver=0;
planetsUpdatingTrail = 0;
updatePlanetDirection = false;
step_count = 0; // used to blink pause text
obj_time = 180; 

leftx=404;
lefty=456;
rightx=356;
righty=456;
ox=308;
oy=456;
paused = false;
global.num_planets = 0;
 
if(instance_exists(mercury_o)) {
    planets[0] = mercury_o;
    global.num_planets++;
}
if(instance_exists(venus_o)) {
    planets[1] = venus_o;
    global.num_planets++;
}
if(instance_exists(earth_o)) {
    planets[2] = earth_o;
    global.num_planets++;
}
if(instance_exists(mars_o)) {
    planets[3] = mars_o;
    global.num_planets++;
}
if(instance_exists(jupiter_o)) {
    planets[4] = jupiter_o;
    global.num_planets++;
}
if(instance_exists(saturn_o)) {
    planets[5] = saturn_o;
    global.num_planets++;
}
if(instance_exists(uranus_o)) {
    planets[6] = uranus_o;
    global.num_planets++;
}
if(instance_exists(neptune_o)) {
    planets[7] = neptune_o;
    global.num_planets++;
}

global.all_planets = planets;

elem_timer=30;
objective_timer = 30;
objective_complete = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left)){
    mx=mouse_x;
    my=mouse_y;
    if(mx&gt;px-dcenter &amp;&amp; mx&lt;=px+dcenter &amp;&amp; my&gt;py-dcenter &amp;&amp; my&lt;=py+dcenter){
        if(paused) {
            paused = false;
            camera_o.target.aimed = false;
            camera_o.target = sun_o;
        }
        else{
            isOn=(isOn+1)%2;
            rot=(rot+180)%360;
        }
    }
    if(!updating &amp;&amp; isOn &amp;&amp; camera_o.target==sun_o &amp;&amp; mx&gt;ppx-dcenter &amp;&amp; mx&lt;=ppx+dcenter &amp;&amp; my&gt;ppy-dcenter &amp;&amp; my&lt;=ppy+dcenter){
        //cost = 3*(hidrogen_slider_o.sliderPos) + helium_slider_o.sliderPos;
        h=hidrogen_slider_o.sliderPos&lt;=hidrogen_slider_o.stored;
        he=helium_slider_o.sliderPos&lt;=helium_slider_o.stored;
        li2fe=other_elems_slider_o.sliderPos&lt;=other_elems_slider_o.stored;
        if(h &amp;&amp; he &amp;&amp; li2fe){
            updating=(updating+1)%2;
            updatePlanetDirection = true;
            timer=90;
        }
    }
    if(camera_o.target.aimed &amp;&amp; mx&gt;leftx-dcenter &amp;&amp; mx&lt;=leftx+dcenter &amp;&amp; my&gt;lefty-dcenter &amp;&amp; my&lt;=lefty+dcenter){
        /*if(camera_o.index &gt; array_length_1d(camera_o.targets) - 2) {
            camera_o.index = 0;
        }
        else {
            camera_o.index = camera_o.index + 1;
            
            while(camera_o.targets[camera_o.index].alive == 0) {
                if(camera_o.index == array_length_1d(camera_o.targets) - 1) {
                    camera_o.index = 0;
                }
                else {
                    camera_o.index = camera_o.index + 1;
                } 
            }
        }
      
        camera_o.target = camera_o.targets[camera_o.index];*/
        if(other_elems_slider_o.stored&gt;=50){
          other_elems_slider_o.stored-=50;
          camera_o.target.asteroid = instance_create(x, y, asteroid_o);
          camera_o.target.asteroid.target = camera_o.target;
          sx = -camera_o.target.a_velocityx;
          sy = -camera_o.target.a_velocityy;
          s=sqrt(power(sx,2)+power(sy,2));
          sx/=s;
          sy/=s;      
          camera_o.target.asteroid.x = camera_o.target.x + sx * 50;
          camera_o.target.asteroid.y = camera_o.target.y + sy * 50;
          with(camera_o.target.asteroid) {
             event_perform(ev_create, 0);
             event_perform(ev_draw, 0);
          }
          camera_o.target.aimed = false;
        }
    }
    if(mx&gt;rightx-dcenter &amp;&amp; mx&lt;=rightx+dcenter &amp;&amp; my&gt;righty-dcenter &amp;&amp; my&lt;=righty+dcenter){
        /*if(camera_o.index &lt; 1) {
            camera_o.index = array_length_1d(camera_o.targets) - 1;
            
            while(camera_o.targets[camera_o.index].alive == 0) {
                camera_o.index = camera_o.index - 1;
            }
        }
        else {
            camera_o.index = camera_o.index - 1;
             
            while(camera_o.targets[camera_o.index].alive == 0) {
                camera_o.index = camera_o.index - 1;
            }
        }
        
        camera_o.target = camera_o.targets[camera_o.index];*/
    }
}
if(updating){
    sun_o.mH+=hidrogen_slider_o.sliderPos/90;
    hidrogen_slider_o.stored-=hidrogen_slider_o.sliderPos/90;
    sun_o.mHe+=helium_slider_o.sliderPos/90;
    helium_slider_o.stored-=helium_slider_o.sliderPos/90;
    sun_o.mLi2Fe+=other_elems_slider_o.sliderPos/90;
    other_elems_slider_o.stored-=other_elems_slider_o.sliderPos/90;
    //coin_purse_o.coins-=3*(hidrogen_slider_o.sliderPos/90)+helium_slider_o.sliderPos/90;
    timer--;
    if(!gameOver &amp;&amp; timer&lt;=0){ 
        updating=(updating+1)%2;
        if(planetsUpdatingTrail == global.num_planets) {
            updatePlanetDirection = false;
            planetsUpdatingTrail = 0;
        }
        hidrogen_slider_o.sliderPos = 0;
        helium_slider_o.sliderPos = 0;
        other_elems_slider_o.sliderPos = 0;
        /*if(sun_o.m&gt;=897.0){
            isOn=0;
            planets = global.planets;
            gameOver=1;
        }*/
    }
    if(gameOver) isOn=0;
}
if(gameOver &amp;&amp; mouse_check_button_pressed(mb_left)){
    mx=mouse_x;
    my=mouse_y;
    if(mx&gt;pgox-d2center &amp;&amp; mx&lt;=pgox+d2center &amp;&amp; my&gt;pgoy-dcenter &amp;&amp; my&lt;=pgoy+dcenter){
        isOn=0;
        gameOver=0;
        room_restart();
    }
}
if(elem_timer==0){
    hidrogen_slider_o.stored+=1;
    helium_slider_o.stored+=1;
    other_elems_slider_o.stored+=1;
    elem_timer=30;
}
if(camera_o.target==sun_o) {
    elem_timer--;
    objective_timer--;
}
if(objective_timer == 0) {
    obj_time--;
    objective_timer = 30;
}
if(objective_complete) gameOver = 1;
if(obj_time == 0 || mercury_o.alive == 0 || mars_o.alive == 0) {
    gameOver = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, pause_menu_o);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(isOn &amp;&amp; !gameOver){
    //draw_sprite_ext(gui_guard_sp, 0,0,240,1,1,0,c_white,1);
    //draw_sprite_ext(gui_guard_sp, 0,640,240,1,1,180,c_white,1);
    if(obj_time &lt; 11) {
        draw_set_colour(c_red);
    }
    draw_text(300,10, string_format(obj_time, 3, 0)+"s");
    draw_set_colour(c_white);
    if(!updating) {
        if(camera_o.target.aimed) draw_sprite(meteor_sp,0,leftx, lefty);
    }
    if(camera_o.target==sun_o){
        draw_sprite(play_sp,0,ppx,ppy);
        draw_set_alpha(0.5);
        draw_roundrect_colour(500 - 15, 5, 635, 170, c_dkgray, c_dkgray, false);
        draw_set_alpha(1.0);
        draw_text(500,10,"Mass: "+string_format(sun_o.m, 3, 2)+"Mt");
        draw_text(500,30,"H: "+string_format((sun_o.mH/sun_o.m)*100, 3, 2)+"%");
        draw_text(500,50,"He: "+string_format((sun_o.mHe/sun_o.m)*100, 3, 2)+"%");
        draw_text(500,70,"Li-Fe: "+string_format((sun_o.mLi2Fe/sun_o.m)*100, 3, 2)+"%");
        draw_text(500,90,"Heavy: "+string_format((sun_o.mHeavy/sun_o.m)*100, 3, 2)+"%");
        draw_text(500,110,"T: "+string_format(sun_o.temperature, 5, 2)+"K");
        draw_text(500,150,"T: "+string_format(earth_o.temperature, 5, 2)+"K");
        
        draw_set_alpha(0.5);
        draw_roundrect_colour(500 - 15, 220 - 5, 635, 370, c_dkgray, c_dkgray, false);
        draw_set_alpha(1.0);
        
        draw_set_halign(fa_right);
        draw_text(640 - 15, 220, "Objective:");
        
        if (camera_o.target==sun_o) {
            draw_set_colour(c_aqua);        
            draw_text(640 - 15, 250, "Collide# planet Mercury# with #planet Mars!"); 
            /*draw_set_colour(c_orange);
            draw_text(640 - 15, 300, "A planet in this#system has#a bonus#objective!");
            draw_set_colour(c_aqua);*/
        }
        draw_set_colour(c_white);
        draw_set_halign(fa_left);
    }else{
        draw_set_alpha(0.5);
        draw_roundrect_colour(0, 55, 220, 140, c_dkgray, c_dkgray, false);
        draw_set_alpha(1.0);
        
        if (step_count mod 40 &lt; 20)
            draw_sprite_ext(pause_sp, false, 320, 65, 1,1,0, c_white, 1);
            
        draw_text(8,60,"Planet: "+camera_o.target.name);
        draw_text(8,80,"Orbital Speed: "+ string(camera_o.target.myspeed));
        draw_text(8,100,"Hit Points: "+ string(camera_o.target.planet_life));
        if(!camera_o.target.aimed) {
            draw_text(8,120,"Li-Fe Quantity: "+ string(other_elems_slider_o.stored));
        } 
        else {
            draw_text(8,120,"Li-Fe Quantity: "+ string(other_elems_slider_o.stored) + "(-50)");
        }
        step_count++;
    }
}

if(gameOver){
    //draw_sprite_ext(gui_guard_sp, 0,0,240,1,1,0,c_white,1);
    //draw_sprite_ext(gui_guard_sp, 0,640,240,1,1,180,c_white,1);
    draw_text(8,60,"Game Over!"); 
    if(sun_o.alive){
        points=0;
        planet_points = global.num_planets*1000;
        points += planet_points;
        draw_text(8, 80, string_format(global.num_planets, 1, 0) + " Planets survived: " + string_format(planet_points, 0, 0) + " Points");
        if(sun_o.temperature &gt;= 4800 &amp;&amp; sun_o.temperature &lt;= 5200) {
            points += 2000;
            draw_text(8, 100, "Life on Earth: 2000 Points");
        }
        if(coin_purse_o.coins &gt; 0) {
            points += 2 * coin_purse_o.coins;
            draw_text(8, 100, "Coins saved: " + string_format(coin_purse_o.coins, 0, 0) + " Points");
        }
        draw_text(8,240,"Final Score: "+string(points) + " Points");
    }else{
        draw_text(8,80,"You blew up the sun!");
        draw_text(8,100,"Final Score: 0 Points");
    }
    draw_sprite(game_over_sp,0,pgox,pgoy);
}else{
    draw_sprite_ext(ctrl_panel_sp, 0,px,py,1,1,rot,c_white,1);
    //draw_sprite_ext(orbit_sp,0,ox,oy,0.505631,0.505631,0,c_white,1);
    //draw_sprite_ext(left_sp,0,leftx,lefty,1,1,0,c_white,1);
    //draw_sprite_ext(left_sp,0,rightx,righty,1,1,180,c_white,1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
